import 'package:compound/core/services/analytics/analytics_service.dart';
import 'package:compound/core/services/checkIn_service/checkin_service.dart';
import 'package:compound/core/services/config/config_service.dart';
import 'package:compound/core/services/content/content_service.dart';
import 'package:compound/core/services/files/files_service.dart';
import 'package:compound/core/services/firestore/firestore_service.dart';
import 'package:compound/core/services/authentication/authentication_service.dart';
import 'package:compound/core/services/dialog_service.dart';
import 'package:compound/core/services/geolocator/geolocator.dart';
import 'package:compound/core/services/images/images.dart';
import 'package:compound/core/services/navigation/navigator_service.dart';
import 'package:compound/core/services/shared_preferences/shared_preferences_service.dart';
import 'package:compound/core/services/storage/cloud_storage_service.dart';
import 'package:compound/core/services/ui/ui_service.dart';
import 'package:compound/modules/messaging/services/messaging_services.dart';
import 'package:compound/modules/properties/properties_view_model.dart';
import 'package:compound/shared_components/evidence_picture/services/evidence_picture_service.dart';
import 'package:compound/shared_components/profile_picture/services/profile_picture_service.dart';
import 'package:compound/shared_services/activity_service.dart';
import 'package:compound/shared_services/csv_service/csv_repository.dart';
import 'package:compound/shared_services/employees_service.dart';
import 'package:compound/shared_services/issue_service.dart';
import 'package:compound/shared_services/logs_service.dart';
import 'package:compound/shared_services/market_service.dart';
import 'package:compound/shared_services/payrrol_service.dart';
import 'package:compound/shared_services/property_service.dart';
import 'package:compound/shared_services/push_notifications_service.dart';
import 'package:compound/shared_services/reports_service.dart';
import 'package:compound/shared_services/role_service.dart';
import 'package:compound/shared_services/timesheet_service.dart';
import 'package:compound/shared_services/type_violation_service.dart';
import 'package:compound/shared_services/violation_service.dart';
import 'package:compound/shared_services/watchlist_service.dart';
import 'package:compound/theme/app_theme_dark.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';

import 'core/services/connectivity/connectivity_service.dart';

GetIt locator = GetIt.instance;

void setupLocator({mock: false}) {
  locator.registerFactory(() => AppThemeBrand());
  locator.registerLazySingleton(() => ContentService());
  locator.registerLazySingleton(() => SharedPreferencesService());
  locator.registerLazySingleton(() => NavigatorService());
  locator.registerLazySingleton(() => DialogService());
  locator.registerLazySingleton(() => CheckInService());
  locator.registerLazySingleton(() => PayrollService());
  locator.registerLazySingleton(() => RoleService());
  locator.registerLazySingleton(() => TimesheetService());
  locator.registerLazySingleton(() => ActivityLogService());
  locator.registerLazySingleton(() => AuthenticationService());
  locator.registerLazySingleton(() => TypeViolationService());
  locator.registerLazySingleton(() => CSVService());
  locator.registerLazySingleton(() => ViolationService());
  locator.registerLazySingleton(() => WatchlistService());
  locator.registerLazySingleton(() => UIService());
  locator.registerLazySingleton(() => ReportsService());
  locator.registerLazySingleton(() => MarketService());
  locator.registerLazySingleton(() => GeolocatorService());
  locator.registerLazySingleton(() => CloudStorageService());
  locator.registerLazySingleton(() => FirestoreService());
  locator.registerLazySingleton(() => AnalyticsService());

  locator.registerLazySingleton(() => ImagesService());
  locator.registerLazySingleton(() => ProfilePictureService());
  locator.registerLazySingleton(() => EvidencePictureService());
  locator.registerLazySingleton(() => FilesService());
  locator.registerLazySingleton(() => ConfigService());
  locator.registerLazySingleton(() => ConnectivityService());
  locator.registerLazySingleton(() => PropertyService());
  locator.registerLazySingleton(() => PropertiesViewModel());
  locator.registerLazySingleton(() => EmployeesService());
  locator.registerLazySingleton(() => IssueService());
  locator.registerLazySingleton(() => MessagingService());
  if (!kIsWeb) locator.registerLazySingleton(() => PushNotificationService());
  locator.registerLazySingleton(() => LogService());
}
